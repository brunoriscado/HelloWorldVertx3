import java.util.regex.Matcher

def generateSrcPath="src/main/java/generated-src"
def generatedSrcDir = file("src/main/java/generated-src")

sourceSets {
    main {
        java.srcDirs += generatedSrcDir
        output.dir(builtBy: 'generateServiceProxy', generateSrcPath)
    }
}

task generateServiceProxy(type: JavaCompile, description: 'Generates EBServiceProxies') {
    source = sourceSets.main.java
    classpath = configurations.compile
    destinationDir = generatedSrcDir
    options.compilerArgs = [

            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor",

            "-AoutputDirectory=$generateSrcPath"
    ]
}

def generatedSources = ['com/tesco/**']


tasks.withType(JavaCompile){
    options.compilerArgs << "-parameters"
}

jar {
    from sourceSets.main.allSource
    baseName = this.properties['mavenArtifactId']
    group = this.properties['group']
    version = this.properties['version']
}

task fatJar(type: Jar) {
    manifest {
        attributes('Main-Class': 'io.vertx.core.Launcher',
                'Main-Verticle': 'com.tesco.disco.browse.Starter')
    }
    baseName = this.properties['mavenArtifactId']
    group = this.properties['group']
    version = this.properties['version']
    classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task sourcesJar(type: Jar, dependsOn: classes) {
    baseName = this.properties['mavenArtifactId']
    group = this.properties['group']
    version = this.properties['version']
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives fatJar, sourcesJar
}

task generatePom << {
    pom {
    }.writeTo("$buildDir/libs/" + this.properties['mavenArtifactId'] + "-$project.version" + ".pom")
}

compileJava() {
    dependsOn generatePom
}

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
}
